// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/common.proto

package v1

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Message representing a value of something in a particular currency
type Amount struct {
	Currency string  `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	Value    float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Amount) Reset()      { *m = Amount{} }
func (*Amount) ProtoMessage() {}
func (*Amount) Descriptor() ([]byte, []int) {
	return fileDescriptor_372283428b44e521, []int{0}
}
func (m *Amount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Amount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Amount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Amount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Amount.Merge(m, src)
}
func (m *Amount) XXX_Size() int {
	return m.Size()
}
func (m *Amount) XXX_DiscardUnknown() {
	xxx_messageInfo_Amount.DiscardUnknown(m)
}

var xxx_messageInfo_Amount proto.InternalMessageInfo

func (m *Amount) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Amount) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// Message representing an expression to be used especially in filter operations
type Expression struct {
	// Operator used in expression
	Op string `protobuf:"bytes,1,opt,name=op,proto3" json:"op,omitempty"`
	// Right hand side of the expression - value
	//
	// Types that are valid to be assigned to RhsOneof:
	//	*Expression_RhsString
	//	*Expression_RhsDouble
	//	*Expression_RhsBool
	//	*Expression_RhsInt
	//	*Expression_RhsTime
	//	*Expression_RhsStringArray
	//	*Expression_RhsAmount
	//	*Expression_RhsRef
	//	*Expression_RhsRefArray
	RhsOneof isExpression_RhsOneof `protobuf_oneof:"rhs_oneof"`
}

func (m *Expression) Reset()      { *m = Expression{} }
func (*Expression) ProtoMessage() {}
func (*Expression) Descriptor() ([]byte, []int) {
	return fileDescriptor_372283428b44e521, []int{1}
}
func (m *Expression) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Expression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Expression.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Expression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expression.Merge(m, src)
}
func (m *Expression) XXX_Size() int {
	return m.Size()
}
func (m *Expression) XXX_DiscardUnknown() {
	xxx_messageInfo_Expression.DiscardUnknown(m)
}

var xxx_messageInfo_Expression proto.InternalMessageInfo

type isExpression_RhsOneof interface {
	isExpression_RhsOneof()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Expression_RhsString struct {
	RhsString string `protobuf:"bytes,2,opt,name=rhs_string,json=rhsString,proto3,oneof" json:"rhs_string,omitempty"`
}
type Expression_RhsDouble struct {
	RhsDouble float64 `protobuf:"fixed64,3,opt,name=rhs_double,json=rhsDouble,proto3,oneof" json:"rhs_double,omitempty"`
}
type Expression_RhsBool struct {
	RhsBool bool `protobuf:"varint,4,opt,name=rhs_bool,json=rhsBool,proto3,oneof" json:"rhs_bool,omitempty"`
}
type Expression_RhsInt struct {
	RhsInt int64 `protobuf:"varint,5,opt,name=rhs_int,json=rhsInt,proto3,oneof" json:"rhs_int,omitempty"`
}
type Expression_RhsTime struct {
	RhsTime *types.Timestamp `protobuf:"bytes,6,opt,name=rhs_time,json=rhsTime,proto3,oneof" json:"rhs_time,omitempty"`
}
type Expression_RhsStringArray struct {
	RhsStringArray *RepeatedString `protobuf:"bytes,7,opt,name=rhs_string_array,json=rhsStringArray,proto3,oneof" json:"rhs_string_array,omitempty"`
}
type Expression_RhsAmount struct {
	RhsAmount *Amount `protobuf:"bytes,8,opt,name=rhs_amount,json=rhsAmount,proto3,oneof" json:"rhs_amount,omitempty"`
}
type Expression_RhsRef struct {
	RhsRef string `protobuf:"bytes,9,opt,name=rhs_ref,json=rhsRef,proto3,oneof" json:"rhs_ref,omitempty"`
}
type Expression_RhsRefArray struct {
	RhsRefArray *RepeatedString `protobuf:"bytes,10,opt,name=rhs_ref_array,json=rhsRefArray,proto3,oneof" json:"rhs_ref_array,omitempty"`
}

func (*Expression_RhsString) isExpression_RhsOneof()      {}
func (*Expression_RhsDouble) isExpression_RhsOneof()      {}
func (*Expression_RhsBool) isExpression_RhsOneof()        {}
func (*Expression_RhsInt) isExpression_RhsOneof()         {}
func (*Expression_RhsTime) isExpression_RhsOneof()        {}
func (*Expression_RhsStringArray) isExpression_RhsOneof() {}
func (*Expression_RhsAmount) isExpression_RhsOneof()      {}
func (*Expression_RhsRef) isExpression_RhsOneof()         {}
func (*Expression_RhsRefArray) isExpression_RhsOneof()    {}

func (m *Expression) GetRhsOneof() isExpression_RhsOneof {
	if m != nil {
		return m.RhsOneof
	}
	return nil
}

func (m *Expression) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func (m *Expression) GetRhsString() string {
	if x, ok := m.GetRhsOneof().(*Expression_RhsString); ok {
		return x.RhsString
	}
	return ""
}

func (m *Expression) GetRhsDouble() float64 {
	if x, ok := m.GetRhsOneof().(*Expression_RhsDouble); ok {
		return x.RhsDouble
	}
	return 0
}

func (m *Expression) GetRhsBool() bool {
	if x, ok := m.GetRhsOneof().(*Expression_RhsBool); ok {
		return x.RhsBool
	}
	return false
}

func (m *Expression) GetRhsInt() int64 {
	if x, ok := m.GetRhsOneof().(*Expression_RhsInt); ok {
		return x.RhsInt
	}
	return 0
}

func (m *Expression) GetRhsTime() *types.Timestamp {
	if x, ok := m.GetRhsOneof().(*Expression_RhsTime); ok {
		return x.RhsTime
	}
	return nil
}

func (m *Expression) GetRhsStringArray() *RepeatedString {
	if x, ok := m.GetRhsOneof().(*Expression_RhsStringArray); ok {
		return x.RhsStringArray
	}
	return nil
}

func (m *Expression) GetRhsAmount() *Amount {
	if x, ok := m.GetRhsOneof().(*Expression_RhsAmount); ok {
		return x.RhsAmount
	}
	return nil
}

func (m *Expression) GetRhsRef() string {
	if x, ok := m.GetRhsOneof().(*Expression_RhsRef); ok {
		return x.RhsRef
	}
	return ""
}

func (m *Expression) GetRhsRefArray() *RepeatedString {
	if x, ok := m.GetRhsOneof().(*Expression_RhsRefArray); ok {
		return x.RhsRefArray
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Expression) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Expression_RhsString)(nil),
		(*Expression_RhsDouble)(nil),
		(*Expression_RhsBool)(nil),
		(*Expression_RhsInt)(nil),
		(*Expression_RhsTime)(nil),
		(*Expression_RhsStringArray)(nil),
		(*Expression_RhsAmount)(nil),
		(*Expression_RhsRef)(nil),
		(*Expression_RhsRefArray)(nil),
	}
}

// List of strings for use in oneofs
type RepeatedString struct {
	Items []string `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *RepeatedString) Reset()      { *m = RepeatedString{} }
func (*RepeatedString) ProtoMessage() {}
func (*RepeatedString) Descriptor() ([]byte, []int) {
	return fileDescriptor_372283428b44e521, []int{2}
}
func (m *RepeatedString) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RepeatedString) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RepeatedString.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RepeatedString) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepeatedString.Merge(m, src)
}
func (m *RepeatedString) XXX_Size() int {
	return m.Size()
}
func (m *RepeatedString) XXX_DiscardUnknown() {
	xxx_messageInfo_RepeatedString.DiscardUnknown(m)
}

var xxx_messageInfo_RepeatedString proto.InternalMessageInfo

func (m *RepeatedString) GetItems() []string {
	if m != nil {
		return m.Items
	}
	return nil
}

// List of expressions
type ExpressionList struct {
	Items []*Expression `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *ExpressionList) Reset()      { *m = ExpressionList{} }
func (*ExpressionList) ProtoMessage() {}
func (*ExpressionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_372283428b44e521, []int{3}
}
func (m *ExpressionList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExpressionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExpressionList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExpressionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressionList.Merge(m, src)
}
func (m *ExpressionList) XXX_Size() int {
	return m.Size()
}
func (m *ExpressionList) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressionList.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressionList proto.InternalMessageInfo

func (m *ExpressionList) GetItems() []*Expression {
	if m != nil {
		return m.Items
	}
	return nil
}

// A message data and its attributes.
type PubsubMessage struct {
	// The message payload. For JSON requests, the value of this field must be
	// base64-encoded.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Optional attributes for this message.
	Attributes map[string]string `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ID of this message assigned by the server at publication time. Guaranteed
	// to be unique within the topic. This value may be read by a subscriber
	// that receives a PubsubMessage via a Pull call or a push delivery. It must
	// not be populated by a publisher in a Publish call.
	MessageId string `protobuf:"bytes,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (m *PubsubMessage) Reset()      { *m = PubsubMessage{} }
func (*PubsubMessage) ProtoMessage() {}
func (*PubsubMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_372283428b44e521, []int{4}
}
func (m *PubsubMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubsubMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubsubMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubsubMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubsubMessage.Merge(m, src)
}
func (m *PubsubMessage) XXX_Size() int {
	return m.Size()
}
func (m *PubsubMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PubsubMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PubsubMessage proto.InternalMessageInfo

func (m *PubsubMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PubsubMessage) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *PubsubMessage) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

type PubsubPushNotification struct {
	// Pubsub message.
	Message *PubsubMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// The name of the Pubsub subscription that pushed the current notification.
	// Format is `projects/{project}/subscriptions/{subscription}`.
	Subscription string `protobuf:"bytes,2,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (m *PubsubPushNotification) Reset()      { *m = PubsubPushNotification{} }
func (*PubsubPushNotification) ProtoMessage() {}
func (*PubsubPushNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_372283428b44e521, []int{5}
}
func (m *PubsubPushNotification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubsubPushNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubsubPushNotification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubsubPushNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubsubPushNotification.Merge(m, src)
}
func (m *PubsubPushNotification) XXX_Size() int {
	return m.Size()
}
func (m *PubsubPushNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_PubsubPushNotification.DiscardUnknown(m)
}

var xxx_messageInfo_PubsubPushNotification proto.InternalMessageInfo

func (m *PubsubPushNotification) GetMessage() *PubsubMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *PubsubPushNotification) GetSubscription() string {
	if m != nil {
		return m.Subscription
	}
	return ""
}

func init() {
	proto.RegisterType((*Amount)(nil), "common.v1.Amount")
	proto.RegisterType((*Expression)(nil), "common.v1.Expression")
	proto.RegisterType((*RepeatedString)(nil), "common.v1.RepeatedString")
	proto.RegisterType((*ExpressionList)(nil), "common.v1.ExpressionList")
	proto.RegisterType((*PubsubMessage)(nil), "common.v1.PubsubMessage")
	proto.RegisterMapType((map[string]string)(nil), "common.v1.PubsubMessage.AttributesEntry")
	proto.RegisterType((*PubsubPushNotification)(nil), "common.v1.PubsubPushNotification")
}

func init() { proto.RegisterFile("v1/common.proto", fileDescriptor_372283428b44e521) }

var fileDescriptor_372283428b44e521 = []byte{
	// 639 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xf5, 0x26, 0x6d, 0x1a, 0x4f, 0xda, 0xb4, 0xac, 0x00, 0xb9, 0x41, 0xb8, 0x51, 0x0e, 0x28,
	0x12, 0xc2, 0x56, 0xc3, 0x01, 0x54, 0xa9, 0x42, 0xad, 0xa8, 0x94, 0x4a, 0x80, 0x2a, 0xc3, 0x89,
	0x4b, 0x64, 0xc7, 0x9b, 0xd8, 0xaa, 0xed, 0xb5, 0x76, 0xd7, 0x81, 0xde, 0xf8, 0x04, 0x3e, 0x83,
	0x3b, 0x3f, 0x81, 0xc4, 0xa5, 0xc7, 0x1e, 0xa9, 0x7b, 0xe1, 0xd8, 0x4f, 0x40, 0xbb, 0xde, 0xa4,
	0x09, 0x12, 0xe2, 0xb6, 0x33, 0xfb, 0xde, 0x9b, 0x99, 0xb7, 0x63, 0xc3, 0xf6, 0x6c, 0xdf, 0x1d,
	0xd3, 0x34, 0xa5, 0x99, 0x93, 0x33, 0x2a, 0x28, 0x36, 0x75, 0x34, 0xdb, 0xef, 0xec, 0x4d, 0x29,
	0x9d, 0x26, 0xc4, 0x55, 0x17, 0x41, 0x31, 0x71, 0x45, 0x9c, 0x12, 0x2e, 0xfc, 0x34, 0xaf, 0xb0,
	0xbd, 0x03, 0x68, 0x1c, 0xa5, 0xb4, 0xc8, 0x04, 0xee, 0x40, 0x73, 0x5c, 0x30, 0x46, 0xb2, 0xf1,
	0x85, 0x85, 0xba, 0xa8, 0x6f, 0x7a, 0x8b, 0x18, 0xdf, 0x87, 0xf5, 0x99, 0x9f, 0x14, 0xc4, 0xaa,
	0x75, 0x51, 0x1f, 0x79, 0x55, 0xd0, 0xfb, 0x5e, 0x07, 0x38, 0xf9, 0x9c, 0x33, 0xc2, 0x79, 0x4c,
	0x33, 0xdc, 0x86, 0x1a, 0xcd, 0x35, 0xb5, 0x46, 0x73, 0xbc, 0x07, 0xc0, 0x22, 0x3e, 0xe2, 0x82,
	0xc5, 0xd9, 0x54, 0x31, 0xcd, 0xa1, 0xe1, 0x99, 0x2c, 0xe2, 0xef, 0x55, 0x6a, 0x0e, 0x08, 0x69,
	0x11, 0x24, 0xc4, 0xaa, 0x4b, 0x69, 0x0d, 0x78, 0xad, 0x52, 0xf8, 0x11, 0x34, 0x25, 0x20, 0xa0,
	0x34, 0xb1, 0xd6, 0xba, 0xa8, 0xdf, 0x1c, 0x1a, 0xde, 0x06, 0x8b, 0xf8, 0x31, 0xa5, 0x09, 0xde,
	0x05, 0x79, 0x1c, 0xc5, 0x99, 0xb0, 0xd6, 0xbb, 0xa8, 0x5f, 0x1f, 0x1a, 0x5e, 0x83, 0x45, 0xfc,
	0x34, 0x13, 0xf8, 0x45, 0xc5, 0x93, 0xb3, 0x5a, 0x8d, 0x2e, 0xea, 0xb7, 0x06, 0x1d, 0xa7, 0x32,
	0xc2, 0x99, 0x1b, 0xe1, 0x7c, 0x98, 0x1b, 0xa1, 0x35, 0x65, 0x8c, 0x4f, 0x60, 0xe7, 0xae, 0xe5,
	0x91, 0xcf, 0x98, 0x7f, 0x61, 0x6d, 0x28, 0x81, 0x5d, 0x67, 0x61, 0xaa, 0xe3, 0x91, 0x9c, 0xf8,
	0x82, 0x84, 0xd5, 0x18, 0x43, 0xc3, 0x6b, 0x2f, 0x66, 0x3a, 0x92, 0x14, 0x3c, 0xa8, 0x06, 0xf3,
	0x95, 0xb1, 0x56, 0x53, 0x09, 0xdc, 0x5b, 0x12, 0xa8, 0x1c, 0xd7, 0xb3, 0x6a, 0xfb, 0xf5, 0x38,
	0x8c, 0x4c, 0x2c, 0x53, 0x5b, 0x25, 0xc7, 0xf1, 0xc8, 0x04, 0xbf, 0x82, 0x2d, 0x7d, 0xa5, 0x5b,
	0x82, 0xff, 0xb7, 0xd4, 0xaa, 0xb8, 0xaa, 0x9f, 0xe3, 0x16, 0xc8, 0x42, 0x23, 0x9a, 0x11, 0x3a,
	0xe9, 0x3d, 0x81, 0xf6, 0x2a, 0x5a, 0xbe, 0x6e, 0x2c, 0x48, 0xca, 0x2d, 0xd4, 0xad, 0xf7, 0x4d,
	0xaf, 0x0a, 0x7a, 0x87, 0xd0, 0xbe, 0x7b, 0xdc, 0x37, 0x31, 0x17, 0xf8, 0xe9, 0x32, 0xae, 0x35,
	0x78, 0xb0, 0x54, 0xff, 0x0e, 0x39, 0xa7, 0xff, 0x44, 0xb0, 0x75, 0x56, 0x04, 0xbc, 0x08, 0xde,
	0x12, 0xce, 0xfd, 0x29, 0xc1, 0x18, 0xd6, 0x42, 0x5f, 0xf8, 0x6a, 0x43, 0x36, 0x3d, 0x75, 0xc6,
	0x43, 0x00, 0x5f, 0x08, 0x16, 0x07, 0x85, 0x20, 0xdc, 0xaa, 0x29, 0xdd, 0xfe, 0x92, 0xee, 0x8a,
	0x82, 0x73, 0xb4, 0x80, 0x9e, 0x64, 0x82, 0x5d, 0x78, 0x4b, 0x5c, 0xfc, 0x18, 0x20, 0xad, 0x60,
	0xa3, 0x38, 0x54, 0xcb, 0x64, 0x7a, 0xa6, 0xce, 0x9c, 0x86, 0x9d, 0x43, 0xd8, 0xfe, 0x8b, 0x8d,
	0x77, 0xa0, 0x7e, 0x4e, 0xe6, 0xbb, 0x2e, 0x8f, 0xab, 0x6b, 0x6e, 0xea, 0x35, 0x3f, 0xa8, 0xbd,
	0x44, 0xbd, 0x1c, 0x1e, 0x56, 0xad, 0x9c, 0x15, 0x3c, 0x7a, 0x47, 0x45, 0x3c, 0x89, 0xc7, 0xbe,
	0x90, 0x5b, 0x3f, 0x80, 0x0d, 0x5d, 0x45, 0x29, 0xb5, 0x06, 0xd6, 0xbf, 0xda, 0xf7, 0xe6, 0x40,
	0xdc, 0x83, 0x4d, 0x5e, 0x04, 0x7c, 0xcc, 0xe2, 0x5c, 0x6a, 0xe8, 0x72, 0x2b, 0xb9, 0x63, 0x72,
	0x79, 0x6d, 0x1b, 0x57, 0xd7, 0xb6, 0x71, 0x7b, 0x6d, 0xa3, 0x2f, 0xa5, 0x8d, 0xbe, 0x95, 0x36,
	0xfa, 0x51, 0xda, 0xe8, 0xb2, 0xb4, 0xd1, 0xaf, 0xd2, 0x46, 0xbf, 0x4b, 0xdb, 0xb8, 0x2d, 0x6d,
	0xf4, 0xf5, 0xc6, 0x36, 0x2e, 0x6f, 0x6c, 0xe3, 0xea, 0xc6, 0x36, 0x3e, 0xba, 0xd3, 0x58, 0x44,
	0x45, 0x20, 0x5b, 0x70, 0x27, 0x09, 0xfd, 0x54, 0xe4, 0x6e, 0x44, 0xfc, 0x30, 0x91, 0x85, 0xf3,
	0x98, 0xbb, 0x53, 0xfa, 0x8c, 0x87, 0xe7, 0xfa, 0x77, 0xe1, 0xce, 0xf6, 0x83, 0x86, 0xfa, 0x20,
	0x9e, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x68, 0x77, 0x7a, 0xa7, 0x45, 0x04, 0x00, 0x00,
}

func (this *Amount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Amount)
	if !ok {
		that2, ok := that.(Amount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Currency != that1.Currency {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Expression) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Expression)
	if !ok {
		that2, ok := that.(Expression)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Op != that1.Op {
		return false
	}
	if that1.RhsOneof == nil {
		if this.RhsOneof != nil {
			return false
		}
	} else if this.RhsOneof == nil {
		return false
	} else if !this.RhsOneof.Equal(that1.RhsOneof) {
		return false
	}
	return true
}
func (this *Expression_RhsString) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Expression_RhsString)
	if !ok {
		that2, ok := that.(Expression_RhsString)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RhsString != that1.RhsString {
		return false
	}
	return true
}
func (this *Expression_RhsDouble) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Expression_RhsDouble)
	if !ok {
		that2, ok := that.(Expression_RhsDouble)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RhsDouble != that1.RhsDouble {
		return false
	}
	return true
}
func (this *Expression_RhsBool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Expression_RhsBool)
	if !ok {
		that2, ok := that.(Expression_RhsBool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RhsBool != that1.RhsBool {
		return false
	}
	return true
}
func (this *Expression_RhsInt) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Expression_RhsInt)
	if !ok {
		that2, ok := that.(Expression_RhsInt)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RhsInt != that1.RhsInt {
		return false
	}
	return true
}
func (this *Expression_RhsTime) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Expression_RhsTime)
	if !ok {
		that2, ok := that.(Expression_RhsTime)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RhsTime.Equal(that1.RhsTime) {
		return false
	}
	return true
}
func (this *Expression_RhsStringArray) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Expression_RhsStringArray)
	if !ok {
		that2, ok := that.(Expression_RhsStringArray)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RhsStringArray.Equal(that1.RhsStringArray) {
		return false
	}
	return true
}
func (this *Expression_RhsAmount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Expression_RhsAmount)
	if !ok {
		that2, ok := that.(Expression_RhsAmount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RhsAmount.Equal(that1.RhsAmount) {
		return false
	}
	return true
}
func (this *Expression_RhsRef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Expression_RhsRef)
	if !ok {
		that2, ok := that.(Expression_RhsRef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RhsRef != that1.RhsRef {
		return false
	}
	return true
}
func (this *Expression_RhsRefArray) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Expression_RhsRefArray)
	if !ok {
		that2, ok := that.(Expression_RhsRefArray)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RhsRefArray.Equal(that1.RhsRefArray) {
		return false
	}
	return true
}
func (this *RepeatedString) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RepeatedString)
	if !ok {
		that2, ok := that.(RepeatedString)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if this.Items[i] != that1.Items[i] {
			return false
		}
	}
	return true
}
func (this *ExpressionList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExpressionList)
	if !ok {
		that2, ok := that.(ExpressionList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *PubsubMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PubsubMessage)
	if !ok {
		that2, ok := that.(PubsubMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return false
		}
	}
	if this.MessageId != that1.MessageId {
		return false
	}
	return true
}
func (this *PubsubPushNotification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PubsubPushNotification)
	if !ok {
		that2, ok := that.(PubsubPushNotification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	if this.Subscription != that1.Subscription {
		return false
	}
	return true
}
func (this *Amount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&v1.Amount{")
	s = append(s, "Currency: "+fmt.Sprintf("%#v", this.Currency)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Expression) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&v1.Expression{")
	s = append(s, "Op: "+fmt.Sprintf("%#v", this.Op)+",\n")
	if this.RhsOneof != nil {
		s = append(s, "RhsOneof: "+fmt.Sprintf("%#v", this.RhsOneof)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Expression_RhsString) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&v1.Expression_RhsString{` +
		`RhsString:` + fmt.Sprintf("%#v", this.RhsString) + `}`}, ", ")
	return s
}
func (this *Expression_RhsDouble) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&v1.Expression_RhsDouble{` +
		`RhsDouble:` + fmt.Sprintf("%#v", this.RhsDouble) + `}`}, ", ")
	return s
}
func (this *Expression_RhsBool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&v1.Expression_RhsBool{` +
		`RhsBool:` + fmt.Sprintf("%#v", this.RhsBool) + `}`}, ", ")
	return s
}
func (this *Expression_RhsInt) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&v1.Expression_RhsInt{` +
		`RhsInt:` + fmt.Sprintf("%#v", this.RhsInt) + `}`}, ", ")
	return s
}
func (this *Expression_RhsTime) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&v1.Expression_RhsTime{` +
		`RhsTime:` + fmt.Sprintf("%#v", this.RhsTime) + `}`}, ", ")
	return s
}
func (this *Expression_RhsStringArray) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&v1.Expression_RhsStringArray{` +
		`RhsStringArray:` + fmt.Sprintf("%#v", this.RhsStringArray) + `}`}, ", ")
	return s
}
func (this *Expression_RhsAmount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&v1.Expression_RhsAmount{` +
		`RhsAmount:` + fmt.Sprintf("%#v", this.RhsAmount) + `}`}, ", ")
	return s
}
func (this *Expression_RhsRef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&v1.Expression_RhsRef{` +
		`RhsRef:` + fmt.Sprintf("%#v", this.RhsRef) + `}`}, ", ")
	return s
}
func (this *Expression_RhsRefArray) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&v1.Expression_RhsRefArray{` +
		`RhsRefArray:` + fmt.Sprintf("%#v", this.RhsRefArray) + `}`}, ", ")
	return s
}
func (this *RepeatedString) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1.RepeatedString{")
	s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExpressionList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1.ExpressionList{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PubsubMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&v1.PubsubMessage{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k, _ := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%#v: %#v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	if this.Attributes != nil {
		s = append(s, "Attributes: "+mapStringForAttributes+",\n")
	}
	s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PubsubPushNotification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&v1.PubsubPushNotification{")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "Subscription: "+fmt.Sprintf("%#v", this.Subscription)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCommon(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Amount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Amount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Amount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.Currency) > 0 {
		i -= len(m.Currency)
		copy(dAtA[i:], m.Currency)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Currency)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Expression) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Expression) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expression) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RhsOneof != nil {
		{
			size := m.RhsOneof.Size()
			i -= size
			if _, err := m.RhsOneof.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Op) > 0 {
		i -= len(m.Op)
		copy(dAtA[i:], m.Op)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Op)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Expression_RhsString) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expression_RhsString) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.RhsString)
	copy(dAtA[i:], m.RhsString)
	i = encodeVarintCommon(dAtA, i, uint64(len(m.RhsString)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *Expression_RhsDouble) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expression_RhsDouble) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= 8
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RhsDouble))))
	i--
	dAtA[i] = 0x19
	return len(dAtA) - i, nil
}
func (m *Expression_RhsBool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expression_RhsBool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.RhsBool {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *Expression_RhsInt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expression_RhsInt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintCommon(dAtA, i, uint64(m.RhsInt))
	i--
	dAtA[i] = 0x28
	return len(dAtA) - i, nil
}
func (m *Expression_RhsTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expression_RhsTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RhsTime != nil {
		{
			size, err := m.RhsTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Expression_RhsStringArray) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expression_RhsStringArray) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RhsStringArray != nil {
		{
			size, err := m.RhsStringArray.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Expression_RhsAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expression_RhsAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RhsAmount != nil {
		{
			size, err := m.RhsAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Expression_RhsRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expression_RhsRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.RhsRef)
	copy(dAtA[i:], m.RhsRef)
	i = encodeVarintCommon(dAtA, i, uint64(len(m.RhsRef)))
	i--
	dAtA[i] = 0x4a
	return len(dAtA) - i, nil
}
func (m *Expression_RhsRefArray) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expression_RhsRefArray) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RhsRefArray != nil {
		{
			size, err := m.RhsRefArray.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *RepeatedString) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RepeatedString) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RepeatedString) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Items[iNdEx])
			copy(dAtA[i:], m.Items[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.Items[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ExpressionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpressionList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExpressionList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PubsubMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubsubMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubsubMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			v := m.Attributes[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCommon(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCommon(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCommon(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PubsubPushNotification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubsubPushNotification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubsubPushNotification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Subscription) > 0 {
		i -= len(m.Subscription)
		copy(dAtA[i:], m.Subscription)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Subscription)))
		i--
		dAtA[i] = 0x12
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Amount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Value != 0 {
		n += 9
	}
	return n
}

func (m *Expression) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Op)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.RhsOneof != nil {
		n += m.RhsOneof.Size()
	}
	return n
}

func (m *Expression_RhsString) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RhsString)
	n += 1 + l + sovCommon(uint64(l))
	return n
}
func (m *Expression_RhsDouble) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	return n
}
func (m *Expression_RhsBool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *Expression_RhsInt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCommon(uint64(m.RhsInt))
	return n
}
func (m *Expression_RhsTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RhsTime != nil {
		l = m.RhsTime.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}
func (m *Expression_RhsStringArray) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RhsStringArray != nil {
		l = m.RhsStringArray.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}
func (m *Expression_RhsAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RhsAmount != nil {
		l = m.RhsAmount.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}
func (m *Expression_RhsRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RhsRef)
	n += 1 + l + sovCommon(uint64(l))
	return n
}
func (m *Expression_RhsRefArray) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RhsRefArray != nil {
		l = m.RhsRefArray.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}
func (m *RepeatedString) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, s := range m.Items {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func (m *ExpressionList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func (m *PubsubMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCommon(uint64(len(k))) + 1 + len(v) + sovCommon(uint64(len(v)))
			n += mapEntrySize + 1 + sovCommon(uint64(mapEntrySize))
		}
	}
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *PubsubPushNotification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Subscription)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func sovCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Amount) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Amount{`,
		`Currency:` + fmt.Sprintf("%v", this.Currency) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Expression) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Expression{`,
		`Op:` + fmt.Sprintf("%v", this.Op) + `,`,
		`RhsOneof:` + fmt.Sprintf("%v", this.RhsOneof) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Expression_RhsString) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Expression_RhsString{`,
		`RhsString:` + fmt.Sprintf("%v", this.RhsString) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Expression_RhsDouble) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Expression_RhsDouble{`,
		`RhsDouble:` + fmt.Sprintf("%v", this.RhsDouble) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Expression_RhsBool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Expression_RhsBool{`,
		`RhsBool:` + fmt.Sprintf("%v", this.RhsBool) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Expression_RhsInt) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Expression_RhsInt{`,
		`RhsInt:` + fmt.Sprintf("%v", this.RhsInt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Expression_RhsTime) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Expression_RhsTime{`,
		`RhsTime:` + strings.Replace(fmt.Sprintf("%v", this.RhsTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Expression_RhsStringArray) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Expression_RhsStringArray{`,
		`RhsStringArray:` + strings.Replace(fmt.Sprintf("%v", this.RhsStringArray), "RepeatedString", "RepeatedString", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Expression_RhsAmount) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Expression_RhsAmount{`,
		`RhsAmount:` + strings.Replace(fmt.Sprintf("%v", this.RhsAmount), "Amount", "Amount", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Expression_RhsRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Expression_RhsRef{`,
		`RhsRef:` + fmt.Sprintf("%v", this.RhsRef) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Expression_RhsRefArray) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Expression_RhsRefArray{`,
		`RhsRefArray:` + strings.Replace(fmt.Sprintf("%v", this.RhsRefArray), "RepeatedString", "RepeatedString", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RepeatedString) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RepeatedString{`,
		`Items:` + fmt.Sprintf("%v", this.Items) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExpressionList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*Expression{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(f.String(), "Expression", "Expression", 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&ExpressionList{`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *PubsubMessage) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k, _ := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	s := strings.Join([]string{`&PubsubMessage{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`MessageId:` + fmt.Sprintf("%v", this.MessageId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PubsubPushNotification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PubsubPushNotification{`,
		`Message:` + strings.Replace(this.Message.String(), "PubsubMessage", "PubsubMessage", 1) + `,`,
		`Subscription:` + fmt.Sprintf("%v", this.Subscription) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCommon(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Amount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Amount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Amount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Expression) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Expression: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Expression: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Op = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RhsString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RhsOneof = &Expression_RhsString{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RhsDouble", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RhsOneof = &Expression_RhsDouble{float64(math.Float64frombits(v))}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RhsBool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.RhsOneof = &Expression_RhsBool{b}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RhsInt", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RhsOneof = &Expression_RhsInt{v}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RhsTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Timestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RhsOneof = &Expression_RhsTime{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RhsStringArray", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RepeatedString{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RhsOneof = &Expression_RhsStringArray{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RhsAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Amount{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RhsOneof = &Expression_RhsAmount{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RhsRef", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RhsOneof = &Expression_RhsRef{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RhsRefArray", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RepeatedString{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RhsOneof = &Expression_RhsRefArray{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepeatedString) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepeatedString: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepeatedString: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpressionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpressionList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpressionList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Expression{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubsubMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubsubMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubsubMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCommon
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCommon
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCommon
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCommon
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCommon(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCommon
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubsubPushNotification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubsubPushNotification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubsubPushNotification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &PubsubMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommon = fmt.Errorf("proto: unexpected end of group")
)
