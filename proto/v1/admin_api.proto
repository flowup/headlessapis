syntax = "proto3";

package admin.v1;

option go_package = "github.com/flowup/headlessapis/go-sdk/admin/v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "v1/common.proto";

service MerchantService {
    // CreateMerchantDry runs validation on the server side and returns
    // errors that need to be corrected to successfully create the merchant
    rpc CreateMerchantDry (Merchant) returns (Merchant) {
        option (google.api.http) = {
            post: "/dry/merchants"
            body: "*"
        };
    }

    // CreateMerchant creates a merchant in the database and returns the object
    // back with populated data
    rpc CreateMerchant (Merchant) returns (Merchant) {
        option (google.api.http) = {
            post: "/merchants"
            body: "*"
        };
    }

    // GetMerchants returns a list of merchants the user has access to
    rpc GetMerchants (google.protobuf.Empty) returns (MerchantList) {
        option (google.api.http) = {
            get: "/merchants"
        };
    }

    // InviteUserDry validates the provided user for existence. correct email,
    // and other required fields by user invitation process
    rpc InviteUserDry (User) returns (User) {
        option (google.api.http) = {
            post: "/dry/merchants/{merchantId}/users"
            body: "*"
        };
    }

    // InviteUser creates a user account for the user in case it didn't exist before.
    // Otherwise it invites the user into the merchant
    rpc InviteUser (User) returns (User) {
        option (google.api.http) = {
            post: "/merchants/{merchantId}/users"
            body: "*"
        };
    }

    // GetUsers returns all users present in the merchant
    rpc GetUsers (Merchant) returns (UserList) {
        option (google.api.http) = {
            get: "/merchants/{merchantId}/users"
        };
    }
}

message Merchant {
    // [Required] merchantId can be set only once and is unchangeable during lifetime
    string merchantId = 1;

    // [Required] name of the merchant can be customized by the user, however, the id
    // will stay unchanged
    string name = 2;
}

message MerchantList {
    repeated Merchant items = 1;
}

message User {
    string id = 1;
    string name = 2;
    string email = 4;

    // id of the user this user was invited by into the system
    string invitedById = 5;

    string merchantId = 10;

    string thumbnail = 50;
}

message UserList {
    repeated User items = 1;
}

service StoreService {
    // CreateStoreDry runs validation on the server side and returns
    // errors that need to be corrected to successfully create the store
    // for the particular merchant
    rpc CreateStoreDry (Store) returns (Store) {
        option (google.api.http) = {
            post: "/dry/merchants/{merchantId}/stores"
            body: "*"
        };
    }

    // Create store creates the store for the particular merchant and returns
    // the store object back to the caller
    rpc CreateStore (Store) returns (Store) {
        option (google.api.http) = {
            post: "/merchants/{merchantId}/stores"
            body: "*"
        };
    }

    // Loads all stores from given merchant
    rpc GetStores (Store) returns (StoreList) {
        option (google.api.http) = {
            get: "/merchants/{merchantId}/stores"
        };
    }
}

message Store {
    string storeId = 1;
    string name = 2;
    string location = 3;

    // [Required] reference to the merchant id
    string merchantId = 10;
}

message StoreList {
    repeated Store items = 1;
}

service InventoryService {
    // CreateProductSchemaDry validates provided product schema and returns a list
    // of errors or the product schema on success
    rpc CreateProductSchemaDry (ProductSchema) returns (ProductSchema) {
        option (google.api.http) = {
            post: "/dry/merchants/{merchantId}/schemas"
            body: "*"
        };
    }

    // CreateProductSchema creates the product schema in the system
    rpc CreateProductSchema (ProductSchema) returns (ProductSchema) {
        option (google.api.http) = {
            post: "/merchants/{merchantId}/schemas"
            body: "*"
        };
    }

    // CreateUpload creates an upload link for the merchant gallery
    rpc CreateUpload (UploadMeta) returns (UploadMeta) {
        option (google.api.http) = {
            post: "/merchants/{merchantId}/upload"
            body: "*"
        };
    }

    // CreateProduct creates a product in the firestore for a particular merchant
    rpc CreateProduct (Product) returns (Product) {
        option (google.api.http) = {
            post: "/merchants/{merchantId}/products:create"
            body: "*"
        };
    }
}

message ProductSchema {
    string productSchemaId = 1;
    string name = 2;

    // createdBy is a reference to the user that created this product schema
    User createdBy = 3;

    string merchantId = 10;

    map<string, string> labels = 20;

    // attributes are custom key-value pairs provided for the product
    map<string, string> attributes = 100;
}

message Product {
    string productId = 1;
    ProductSchema productSchema = 2;

    string merchantId = 10;
    repeated string storeIds = 11;
    string providerId = 12;
    string name = 13;
    string description = 14;
    common.v1.Amount defaultAmount = 15;
    repeated string images = 16;

    map<string, string> labels = 20;

    // attributes are custom key-value pairs provided for the product
    map<string, string> attributes = 100;
}

message UploadMeta {
    // [Required] fileName is searchable throughout the system
    string fileName = 1;

    // [Output Only] this is being provided by the system after the file is uploaded
    string link = 2;

    string merchantId = 10;

    map<string, string> labels = 20;
}

service WarehouseService {

}

message Warehouse {

}

message WarehouseFilter {

}

message WarehouseList {
    repeated Warehouse items = 1;
}

service OrderService {
    // CreateOrder creates an order for the particular user in the store
    rpc CreateOrder (CreateOrderRequest) returns (Order) {
        option (google.api.http) = {
            post: "/merchants/{merchant_id}/stores/{store_id}/orders"
            body: "*"
        };
    }

    // UpdateOrder update an attributes in order
    rpc UpdateOrder (UpdateOrderRequest) returns (Order) {
        option (google.api.http) = {
            put: "/merchants/{merchant_id}/stores/{store_id}/orders/{order_id}"
            body: "*"
        };
    }

    // CancelOrder set status of order to cancel
    rpc CancelOrder (CancelOrderRequest) returns (Order) {
        option (google.api.http) = {
            delete: "/merchants/{merchant_id}/stores/{store_id}/orders/{order_id}"
        };
    }

    // ListOrders returns all orders that the user has access to
    rpc ListOrders (ListOrdersRequest) returns (ListOrdersResponse) {
        option (google.api.http) = {
            get: "/merchants/{merchant_id}/orders"
        };
    }
}


enum OrderStatus {
    ORDER_STATUS_UNSPECIFIED = 0;
    NOT_SUBMITTED = 1;
    SUBMITTED = 2;
    PAID = 3;
    SENT = 4;
    CANCEL = 5;
}

message CreateOrderRequest {
    OrderStatus status = 2;
    string note = 3;
    repeated OrderItem items = 4;
    common.v1.Amount total_amount = 5;

    string merchant_id = 10;
    string store_id = 11;
}

message UpdateOrderRequest {
    string order_id = 1;

    OrderStatus status = 2;
    string note = 3;
    repeated OrderItem items = 4;
    common.v1.Amount total_amount = 5;

    string merchant_id = 10;
    string store_id = 11;
}

message CancelOrderRequest {
    string order_id = 1;
    string merchant_id = 2;
    string store_id = 3;
}

message Order {
    string order_id = 1;

    OrderStatus status = 2;
    string note = 3;
    repeated OrderItem items = 4;
    common.v1.Amount total_amount = 5;

    int64 created_at = 6;

    string merchant_id = 10;
    string store_id = 11;
}

message OrderItem {
    Product product = 1;
    int32 count = 2;
    common.v1.Amount amount = 3;
}

message ListOrdersResponse {
    repeated Order items = 1;
}

message ListOrdersRequest {
    string order_id = 1;
    repeated OrderStatus status = 2;

    string merchant_id = 10;
    string store_id = 11;
}

service ProviderService {
    // CreateProvider creates a provider for the particular merchant
    rpc CreateProvider (Provider) returns (Provider) {
        option (google.api.http) = {
            post: "/merchants/{merchantId}/providers"
            body: "*"
        };
    }

    // GetProviders returns all providers that the user has access to
    rpc GetProviders (ProviderFilter) returns (ProviderList) {
        option (google.api.http) = {
            get: "/merchants/{merchantId}/providers"
        };
    }
}

message Provider {
    string providerId = 1;

    string merchantId = 10;
}

message ProviderFilter {
    string merchantId = 10;
}

message ProviderList {
}

service CustomerService {
    // CreateCustomer creates a customer for the particular merchant
    rpc CreateCustomer (Customer) returns (Customer) {
        option (google.api.http) = {
            post: "/merchants/{merchantId}/customers"
            body: "*"
        };
    }

    // GetCustomers returns all customers that the user has access to
    rpc GetCustomers (CustomerFilter) returns (CustomerList) {
        option (google.api.http) = {
            get: "/merchants/{merchantId}/customers"
        };
    }
}

message Customer {
    string customerId = 1;

    string merchantId = 10;
}

message CustomerFilter {
    string merchantId = 10;
}

message CustomerList {

}
