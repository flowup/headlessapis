syntax = "proto3";

package client.v1;

option go_package = "github.com/flowup/headlessapis/go-sdk/client/v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "v1/common.proto";

service AuthService {
    rpc SignInWithPassword (EmailPassword) returns (Customer) {
        option (google.api.http) = {
            post: "/account:signIn"
            body: "*"
        };
    }

    rpc SignUpWithPassword (EmailPassword) returns (Customer) {
        option (google.api.http) = {
            post: "/account:signUp"
            body: "*"
        };
    }
}

message EmailPassword {
    string email = 1;
    string password = 2;
    string merchant_id = 3;
}

message Customer {
    string customer_id = 1;
    string name = 2;
    string thumbnail = 3;
}

service StoreService {
    // Retrieves basic information about a given store
    rpc GetStore (GetStoreRequest) returns (Store) {
        option (google.api.http) = {
            get: "/merchant/{merchant_id}/store/{store_id}"
        };
    }

    // Lists all products for a given store with brief details
    rpc ListProducts (ProductFilter) returns (StoreItemList) {
        option (google.api.http) = {
            get: "/merchant/{merchant_id}/store/{store_id}/product"
        };
    }

    // Retrieves more detailed information about the product
    rpc GetProduct(GetProductRequest) returns (StoreItem) {
        option (google.api.http) = {
            get: "/merchant/{merchant_id}/store/{store_id}/product/{product_id}"
        };
    }
}

message Store {
    string store_id = 1;
    string merchant_id = 2;

    string name = 10;
    reserved 11;
    //    string location = 11;
    string address = 12;
    string description = 13;
}

// Request for loading a single store by ID from a given merchant.
message GetStoreRequest {
    string store_id = 1;
    string merchant_id = 2;
}

message StoreItem {
    string merchant_id = 1;
    string store_item_id = 2;
    string inventory_id = 3;
    google.protobuf.Timestamp created_at = 4;

    common.v1.Amount amount = 10;
    uint32 count = 11;

    Product product = 50;
}

message Product {
    string product_id = 1;
    string merchant_id = 2;
    string store_id = 3;

    string name = 10;
    string description = 11;
    repeated string images = 12;

    map<string, string> labels = 100;
    map<string, string> attributes = 101;
}

// Request for loading a product directly by its ID
message GetProductRequest {
    string product_id = 1;
    string merchant_id = 2;
    string store_id = 3;
}

// Request for filtering product in a store
message ProductFilter {
    string merchant_id = 1;
    string store_id = 2;

    // Possible attributes on which expressions can be built on:
    // - "product.createdAt"
    // - "product.name"
    // - "product.description"
    // - "product.labels"
    // - "product.attributes"
    // - "amount"
    // - "amount.value"
    // - "amount.currency"
    // - "count"
    map<string, common.v1.ExpressionList> filter = 10;
}

message StoreItemList {
    repeated StoreItem items = 1;
}

service OrderService {
    // GetActiveOrder returns the current order that the client has active.
    // In case there's no active order, an empty order is returned
    rpc GetActiveOrder (google.protobuf.Empty) returns (Order) {
        option (google.api.http) = {
            get: "/order:active"
        };
    }

    // AddItemToOrder adds an item to the currently active order
    rpc AddItemToOrder (OrderItem) returns (Order) {
        option (google.api.http) = {
            post: "/order/{order_id}/item:add"
            body: "*"
        };
    }

    // RemoveItemFromOrder removes an item from the currently active order
    rpc RemoveItemFromOrder (OrderItem) returns (Order) {
        option (google.api.http) = {
            post: "/order/{order_id}/item:remove"
            body: "*"
        };
    }

    // SubmitOrder submits the order to the system and creates it if it's possible,
    // otherwise returns errors why the creation failed
    rpc SubmitOrder (Order) returns (Order) {
        option (google.api.http) = {
            post: "/order"
            body: "*"
        };
    }

    // ListOrders returns all orders that the client has access to
    rpc ListOrders (OrderFilter) returns (OrderList) {
        option (google.api.http) = {
            get: "/order"
        };
    }
}

message Order {
    string order_id = 1;
    repeated OrderItem items = 2;

    string status = 3;
}

message OrderItem {
    Product product = 1;
    int32 count = 2;

    string order_id = 10;
}

message OrderList {
    repeated Order items = 1;
}

message OrderFilter {
    string order_id = 1;
}
