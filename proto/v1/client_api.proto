syntax = "proto3";

package client.v1;

option go_package = "github.com/flowup/headlessapis/go-sdk/client/v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

service AuthService {
    rpc SignInWithPassword (EmailPassword) returns (Customer) {
        option (google.api.http) = {
            post: "/accounts:signIn"
            body: "*"
        };
    }

    rpc SignUpWithPassword (EmailPassword) returns (Customer) {
        option (google.api.http) = {
            post: "/accounts:signUp"
            body: "*"
        };
    }
}

message EmailPassword {
    string email = 1;
    string password = 2;
    string merchantId = 3;
}

message Customer {
    string customerId = 1;
    string name = 2;
    string thumbnail = 3;
}

service ProductService {
    rpc ListProducts (ProductFilter) returns (ProductList) {
        option (google.api.http) = {
            get: "/products"
        };
    }

    rpc GetProduct(ProductFilter) returns (Product) {
        option (google.api.http) = {
            get: "/products/{productId}"
        };
    }
}

message Product {
    string productId = 1;
    string name = 2;

    string storeId = 11;

    map<string, string> labels = 20;

    // attributes are custom key-value pairs provided for the product
    map<string, string> attributes = 100;
}

message ProductFilter {
    string productId = 1;
    string name = 2;
    string merchantId = 3;
    string storeId = 4;
}

message ProductList {
    repeated Product data = 1;
}

service OrderService {
    // GetActiveOrder returns the current order that the client has active.
    // In case there's no active order, an empty order is returned
    rpc GetActiveOrder (google.protobuf.Empty) returns (Order) {
        option (google.api.http) = {
            get: "/orders:active"
        };
    }

    // AddItemToOrder adds an item to the currently active order
    rpc AddItemToOrder (OrderItem) returns (Order) {
        option (google.api.http) = {
            post: "/orders/{orderId}/items:add"
            body: "*"
        };
    }

    // RemoveItemFromOrder removes an item from the currently active order
    rpc RemoveItemFromOrder (OrderItem) returns (Order) {
        option (google.api.http) = {
            post: "/orders/{orderId}/items:remove"
            body: "*"
        };
    }

    // SubmitOrder submits the order to the system and creates it if it's possible,
    // otherwise returns errors why the creation failed
    rpc SubmitOrder (Order) returns (Order) {
        option (google.api.http) = {
            post: "/orders"
            body: "*"
        };
    }

    // ListOrders returns all orders that the client has access to
    rpc ListOrders (OrderFilter) returns (OrderList) {
        option (google.api.http) = {
            get: "/orders"
        };
    }
}

message Order {
    string orderId = 1;
    repeated OrderItem items = 2;

    string status = 3;
}

message OrderItem {
    Product product = 1;
    int32 count = 2;

    string orderId = 10;
}

message OrderList {
    repeated Order items = 1;
}

message OrderFilter {
    string orderId = 1;
}
